AWSTemplateFormatVersion: "2010-09-09"
Description: this is WeatherApp using s3, Lambda and APIgateway

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - s3.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for lambda to access s3 and dynamodb 
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      RoleName: LambdaExecutionRole

  LambdaFunctionSpringFunction:
    DependsOn: LambdaExecutionRole
    Type: "AWS::Lambda::Function"
    Properties:
      MemorySize: 512
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 15
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "com.example.weatherservice.LambdaHandler::handleRequest"
      Code:
        S3Bucket: weather11
        S3Key: data-0.0.1-SNAPSHOT.jar
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableWeatherData
          KRVSPK_AWS_REGION: 'us-east-1'
      FileSystemConfigs: []
      FunctionName: "SpringFunction"
      Runtime: "java21"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/SpringFunction"
      RecursiveLoop: "Terminate"
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"

  DynamoDBTableWeatherData:
    Type: "AWS::DynamoDB::Table"
    Properties:
      SSESpecification:
        SSEEnabled: false
      TableName: "Weather"
      AttributeDefinitions:
      - AttributeType: "S"
        AttributeName: "cityName"
      ContributorInsightsSpecification:
        Enabled: false
      BillingMode: "PAY_PER_REQUEST"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      KeySchema:
      - KeyType: "HASH"
        AttributeName: "cityName"
      DeletionProtectionEnabled: false
      TableClass: "STANDARD"
      Tags: []
      TimeToLiveSpecification:
        Enabled: false

  weatherRestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: WeatherRestAPI

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref weatherRestAPI
      ParentId: !GetAtt 
        - weatherRestAPI
        - RootResourceId
      PathPart: '{proxy+}'

  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref weatherRestAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${LambdaFunctionSpringFunction.Arn}/invocations'
  
  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ProxyResourceANY
    Properties:
      RestApiId: !Ref weatherRestAPI
      Description: My deployment
      StageName: dev

  LambdaInvokPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionSpringFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 844638163682
  
  SpringEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(5 minutes)"
      Targets:
        - Id: !Ref LambdaFunctionSpringFunction
          Arn: !GetAtt LambdaFunctionSpringFunction.Arn
      State: "ENABLED"
      Name: "SpringLambdaEvent"    
  
  SpringEventRuleToSpringFunctionConnector:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionSpringFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SpringEventRule.Arn

  WeatherData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Weather
      AttributeDefinitions:
        - AttributeName: city
          AttributeType: S
      KeySchema:
        - AttributeName: city
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  WeatherIamUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  WeatherIamUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - WeatherData
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: WeatherIamUserPolicy
      Roles:
        - !Ref WeatherIamUserRole

  WeatherUpdatesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: weather11 
        S3Key: data-0.0.1-SNAPSHOT.jar
      Environment:
        Variables:
          TABLE_NAME: !Ref WeatherData
      Handler: com.example.weatherservice.LambdaHandler::handleRequest
      MemorySize: 1024
      Role: !GetAtt 
        - WeatherIamUserRole
        - Arn
      Runtime: java17
      Timeout: 30
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
    DependsOn:
      - WeatherIamUserPolicy
      - WeatherIamUserRole

  WeatherLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17

  WeatherLambdaRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:DeleteItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource: !GetAtt 
              - WeatherData
              - Arn
        Version: 2012-10-17
      PolicyName: WeatherLambdaRolePolicy
      Roles:
        - !Ref WeatherLambdaRole
        
  LambdaInvokPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WeatherUpdatesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 844638163682        

  WeatherRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This service serves weather data.
      Name: Weather-app-rest-api

  WeatherApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - WeatherRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref WeatherRestApi

  WeatherUpdatesApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03